/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };

 -> value at the node would tell if it is left heavy , right heavy or neither.
 -> right - left  >>> if +ve then right heavy if -ve then left heavy 
    if 0 then nither.
 */

 
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if (!root)
            return true;
        queue<TreeNode*> Q;
        vector<TreeNode*> lvls; //would contain level order traversal
        Q.push(root);

        while(!Q.empty())
        {
            if (Q.front()->right)
                Q.push(Q.front()->right);
            if (Q.front()->left)
                Q.push(Q.front()->left);
            lvls.push_back(Q.front());
            Q.pop();
        }
        
        for (int i = lvls.size()-1 ; i>=0 ; i--)
        {
            if (!(lvls[i]->left || lvls[i]->right)) // it is a leaf node
            {
                lvls[i]->val = 1;
            }
            else
            {
                if ( !(lvls[i]->left)) // only contains right child
                {
                    if (lvls[i]->right->val > 1)
                        return false;
                    lvls[i]->val = lvls[i]->right->val + 1;
                }
                if ( !(lvls[i]->right)) // only contains left child
                {
                    if (lvls[i]->left->val > 1)
                        return false;
                    lvls[i]->val = lvls[i]->left->val + 1;
                }
                else if (lvls[i]->left && lvls[i]->right)
                {  
                    
                    if (lvls[i]->right->val - lvls[i]->left->val < -1 || lvls[i]->right->val - lvls[i]->left->val > 1)
                        return false;
                    if (lvls[i]->right->val > lvls[i]->left->val)
                        lvls[i]->val = lvls[i]->right->val + 1;
                    else
                        lvls[i]->val = lvls[i]->left->val + 1;
                } 
            }
        }
        return true;
    }
};
